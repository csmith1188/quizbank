<%- include('../../partials/header.ejs', {title: 'Content' }) %>
    <link rel="stylesheet" href="/styles/content.css">

    <main class="course-selection">
        <div class="glass-card">
            <h2 class="page-title">Browse Content</h2>
            <div class="content-search-area">
                <div class="search-toggle-group">
                    <button class="search-toggle-btn active" data-mode="name">Search by Name</button>
                    <button class="search-toggle-btn" data-mode="number">Search by Number</button>
                </div>
                <div class="search-input-group">
                    <input type="text" id="searchInput" placeholder="Type to search..." autocomplete="off">
                    <button id="searchBtn" class="search-btn"><span>üîç</span> Search</button>
                </div>
            </div>
            <div class="content-view-selector">
                <button class="content-view-btn active" data-view="courses">Courses</button>
                <button class="content-view-btn" data-view="sections">Sections</button>
                <button class="content-view-btn" data-view="units">Units</button>
                <button class="content-view-btn" data-view="tasks">Tasks</button>
                <button class="content-view-btn" data-view="questions">Questions</button>
            </div>
            <div id="content-view-area">
                <!-- Content will dynamically appear here -->
            </div>
        </div>
    </main>

    <script>
        // Example nested data
        const exampleData = {
            courses: [
                {
                    name: "Algebra 1", number: "101", id: "course1", sections: [
                        {
                            name: "Section A", number: "1", id: "sectionA", units: [
                                {
                                    name: "Unit 1: Equations", number: "1", id: "unit1", tasks: [
                                        {
                                            name: "Task: Solve X", number: "A1", id: "taskX", questions: [
                                                { text: "What is 2+2?", number: "Q1", id: "q1" }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    name: "Biology", number: "102", id: "course2", sections: [
                        {
                            name: "Section B", number: "2", id: "sectionB", units: [
                                {
                                    name: "Unit 2: Functions", number: "2", id: "unit2", tasks: [
                                        {
                                            name: "Task: Graph Y", number: "B2", id: "taskY", questions: [
                                                { text: "Define mitosis.", number: "Q2", id: "q2" }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        };

        let currentView = "courses";
        let searchMode = "name";
        let selectedPath = {
            course: null,
            section: null,
            unit: null,
            task: null
        };

        function getItems(view, filter = "") {
            let items = [];
            if (view === "courses") {
                items = exampleData.courses;
            } else if (view === "sections") {
                items = selectedPath.course ? selectedPath.course.sections || [] : [];
            } else if (view === "units") {
                items = selectedPath.section ? selectedPath.section.units || [] : [];
            } else if (view === "tasks") {
                items = selectedPath.unit ? selectedPath.unit.tasks || [] : [];
            } else if (view === "questions") {
                items = selectedPath.task ? selectedPath.task.questions || [] : [];
            }
            if (filter) {
                items = items.filter(item => {
                    const field = searchMode === "number"
                        ? (item.number || item.id || "")
                        : (item.name || item.text || "");
                    return field.toLowerCase().includes(filter.toLowerCase());
                });
            }
            return items;
        }

        function renderView(view, filter = "") {
            const area = document.getElementById('content-view-area');
            area.innerHTML = ""; // Clear previous
            let items = getItems(view, filter);

            if (
                (view === "sections" && !selectedPath.course) ||
                (view === "units" && !selectedPath.section) ||
                (view === "tasks" && !selectedPath.unit) ||
                (view === "questions" && !selectedPath.task)
            ) {
                area.innerHTML = `<p class="no-results">Please select a ${previousViewName(view)} first.</p>`;
                return;
            }

            let selectedObj = null;
            if (view === "sections" && selectedPath.course) selectedObj = selectedPath.course;
            if (view === "units" && selectedPath.section) selectedObj = selectedPath.section;
            if (view === "tasks" && selectedPath.unit) selectedObj = selectedPath.unit;
            if (view === "questions" && selectedPath.task) selectedObj = selectedPath.task;
            if (selectedObj) {
                area.innerHTML += `
        <div class="selected-path-info">
          <span><strong>${selectedObj.name || selectedObj.text}</strong> <span class="item-number">${selectedObj.number || ""}</span></span>
          <button class="unselect-btn selected-path-unselect" data-view="${view}">&#10005; Unselect</button>
        </div>
      `;
            }

            if (items.length === 0) {
                area.innerHTML += `<p class="no-results">No results found.</p>`;
                return;
            }

            let html = `<ul class="dropdown-list">`;
            items.forEach(item => {
                let display = view === "questions" ? item.text : item.name;
                html += `<li>
        <button class="dropdown-item-btn" data-view="${view}" data-id="${item.id}">
          <strong>${display}</strong>
          <span class="item-number">${item.number || ""}</span>
        </button>
      </li>`;
            });
            html += `</ul>`;

            area.innerHTML += html;
            attachDropDownListeners(view);
            attachUnselectListeners(view);
            highlightSelectedButtons();
        }

        function previousViewName(view) {
            if (view === "sections") return "course";
            if (view === "units") return "section";
            if (view === "tasks") return "unit";
            if (view === "questions") return "task";
            return "";
        }

        function highlightSelectedButtons() {
            resetSelectorButtons();
            if (selectedPath.course) updateSelectorButton("courses", selectedPath.course);
            if (selectedPath.section) updateSelectorButton("sections", selectedPath.section);
            if (selectedPath.unit) updateSelectorButton("units", selectedPath.unit);
            if (selectedPath.task) updateSelectorButton("tasks", selectedPath.task);
        }
        function updateSelectorButton(view, selectedItem) {
            let btn = document.querySelector(`.content-view-btn[data-view="${view}"]`);
            if (btn) {
                btn.innerHTML = `<span class="selected-indicator">‚úî</span> ${selectedItem.name || selectedItem.text}`;
                btn.classList.add("selected");
            }
        }
        function resetSelectorButtons() {
            document.querySelectorAll('.content-view-btn').forEach(btn => {
                btn.classList.remove("selected");
                btn.innerHTML = btn.getAttribute("data-view").charAt(0).toUpperCase() + btn.getAttribute("data-view").slice(1);
            });
        }

        function attachDropDownListeners(view) {
            document.querySelectorAll('.dropdown-item-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    let id = this.getAttribute("data-id");
                    let item = getItems(view).find(i => i.id === id);
                    if (view === "courses") {
                        selectedPath.course = item;
                        selectedPath.section = null;
                        selectedPath.unit = null;
                        selectedPath.task = null;
                        currentView = "sections";
                    } else if (view === "sections") {
                        selectedPath.section = item;
                        selectedPath.unit = null;
                        selectedPath.task = null;
                        currentView = "units";
                    } else if (view === "units") {
                        selectedPath.unit = item;
                        selectedPath.task = null;
                        currentView = "tasks";
                    } else if (view === "tasks") {
                        selectedPath.task = item;
                        currentView = "questions";
                    }
                    setTabActive(currentView);
                    renderView(currentView, document.getElementById('searchInput').value);
                });
            });
        }

        function attachUnselectListeners(view) {
            document.querySelectorAll('.selected-path-unselect').forEach(btn => {
                btn.addEventListener('click', function () {
                    if (view === "sections") {
                        selectedPath.course = null;
                        selectedPath.section = null;
                        selectedPath.unit = null;
                        selectedPath.task = null;
                        currentView = "courses";
                    } else if (view === "units") {
                        selectedPath.section = null;
                        selectedPath.unit = null;
                        selectedPath.task = null;
                        currentView = "sections";
                    } else if (view === "tasks") {
                        selectedPath.unit = null;
                        selectedPath.task = null;
                        currentView = "units";
                    } else if (view === "questions") {
                        selectedPath.task = null;
                        currentView = "tasks";
                    }
                    setTabActive(currentView);
                    renderView(currentView, document.getElementById('searchInput').value);
                });
            });
        }

        function setTabActive(view) {
            document.querySelectorAll('.content-view-btn').forEach(btn => {
                if (btn.getAttribute('data-view') === view) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
        }
        document.querySelectorAll('.content-view-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                let view = this.getAttribute('data-view');
                setTabActive(view);
                currentView = view;
                renderView(currentView, document.getElementById('searchInput').value);
            });
        });

        document.querySelectorAll('.search-toggle-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.search-toggle-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                searchMode = this.getAttribute('data-mode');
                renderView(currentView, document.getElementById('searchInput').value);
                document.getElementById('searchInput').placeholder =
                    searchMode === "number" ? "Type number (e.g. unit, course)..." : "Type name...";
            });
        });

        document.getElementById('searchBtn').addEventListener('click', function () {
            const filter = document.getElementById('searchInput').value;
            renderView(currentView, filter);
        });
        document.getElementById('searchInput').addEventListener('input', function () {
            renderView(currentView, this.value);
        });

        renderView(currentView);
    </script>

    <%- include('../../partials/footer.ejs') %>